{"version":3,"sources":["App.js","registerServiceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","data","getData","_this2","callApi","then","res","setState","listData","endpoint","method","arguments","length","undefined","body","axios","url","catch","err","console","log","_this3","dataTable","columns","label","field","sort","width","rows","react_default","a","createElement","mdbreact","className","md","rounded","gradient","onClick","striped","bordered","hover","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.23c6dbfa.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport axios from 'axios';\nimport {\n  DataTable, Container, Row, Col, Card, CardBody, Button\n} from \"mdbreact\";\nimport \"./index.css\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: {}\n    };\n  }\n  \n  componentDidMount() {\n    this.getData();\n  }\n  \n  getData() {\n\t  this.callApi('http://localhost/reactapi/getall.php?ham=GetAll', 'GET', null)\n\t\t.then(res => this.setState({data: res.data.listData}))\n  }\n  \n   callApi(endpoint: string, method = 'GET', body: any): any {\n    return axios({\n        method: method,\n        url: endpoint,\n        data: body\n    }).catch(err => {\n        console.log(err);\n    })\n}\n\n  render() {\n\tvar dataTable = {\n\t\t\"columns\": [\n\t\t\t{\n\t\t\t  \"label\": \"ID\",\n\t\t\t  \"field\": \"id\",\n\t\t\t  \"sort\": \"asc\",\n\t\t\t  \"width\": 150\n\t\t\t},\n\t\t\t{\n\t\t\t  \"label\": \"Rfid\",\n\t\t\t  \"field\": \"rfid\",\n\t\t\t  \"sort\": \"asc\",\n\t\t\t  \"width\": 270\n\t\t\t},\n\t\t\t{\n\t\t\t  \"label\": \"Allow\",\n\t\t\t  \"field\": \"allow\",\n\t\t\t  \"sort\": \"asc\",\n\t\t\t  \"width\": 200\n\t\t\t},\n\t\t\t{\n\t\t\t  \"label\": \"Date\",\n\t\t\t  \"field\": \"date\",\n\t\t\t  \"sort\": \"asc\",\n\t\t\t  \"width\": 100\n\t\t\t}\n\t\t],\n\t\t\"rows\": this.state.data\n\t};\n\t\n    return (\n\t\t<Container className=\"mt-3\">\n\t\t  <Row className=\"py-3\">\n\t\t\t<Col md=\"12\">\n\t\t\t  <Card>\n\t\t\t\t<CardBody>\n\t\t\t\t  <h2 className=\"h2-responsive pb-4\">\n\t\t\t\t\tDatatable with data from API\n\t\t\t\t\t<Button rounded gradient=\"peach\" onClick={() => this.getData()}>Refresh</Button>\n\t\t\t\t  </h2>\n\t\t\t\t  <DataTable\n\t\t\t\t\tstriped\n\t\t\t\t\tbordered\n\t\t\t\t\thover\n\t\t\t\t\tdata={dataTable}\n\t\t\t\t  />\n\t\t\t\t</CardBody>\n\t\t\t  </Card>\n\t\t\t</Col>\n\t\t  </Row>\n\t\t</Container>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport './index.css';\nimport App from './App';\n\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render( <App /> , document.getElementById('root'));\n\nregisterServiceWorker();"],"sourceRoot":""}